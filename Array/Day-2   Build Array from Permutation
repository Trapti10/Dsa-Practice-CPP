# 🧩 Problem: Build Array from Permutation

**[Problem Link](https://leetcode.com/problems/build-array-from-permutation/description/)**

## 📄 Problem Statement
Given a zero-based permutation `nums` (0-indexed), build an array `ans` of the same length where `ans[i] = nums[nums[i]]` for each `0 <= i < nums.length` and return it.

A zero-based permutation `nums` is an array of distinct integers from `0` to `nums.length - 1` (inclusive).

---

## 💻 Example 1

**Input:**  
`nums = [0,2,1,5,3,4]`  
**Output:**  
`[0,1,2,4,5,3]`  

**Explanation:**  
The array `ans` is built as follows:  
`ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]`  
`= [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]`  
`= [0,1,2,4,5,3]`

## Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]

---

## 🧠 My Approach
I created a new vector `ans` of the same size as `nums`.  
Then for each index `i`, I assigned `ans[i] = nums[nums[i]]`.  
Basically, i am replacing every element with the element present at its value index.  
After filling the array, I simply returned `ans`. 

---

## ⚙️ Code (C++)
```cpp
class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> ans(nums.size());
        for(int i = 0; i < nums.size(); i++) {
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
};
🕒 Time Complexity
We iterate through the array once → O(n)

💾 Space Complexity
Extra array ans of size n → O(n)
